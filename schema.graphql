type Query {
    # If there is no "uid" provided, the server will default to returns currently logged in user. (From provided token in headers)
    user(uid: String): User
    # Journeys of current user
    journeys: [Journey!]!
}

type Mutation {
    login(username: String!, password: String!): UserCredential!
    register(username: String!, password: String!): UserCredential!

    createJourney(title: String!, content: String!): Journey!
}

# DateTime with RFC3339 format eg. "2006-01-02T15:04:05Z07:00"
scalar DateTime

type UserCredential {
    user: User!
    session: Session!
}

type Session {
    # Bearer token used for doing authenticated call by adding to Http Headers with key "Authorization"
    token: String!
}

type User {
    uid: String!
    username: String!
}

type Journey {
    title: String!
    content: String!
    author: User!

    createdAt: DateTime!
    updatedAt: DateTime!
}